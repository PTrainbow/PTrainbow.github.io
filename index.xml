<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>北邙山之光的 Blog</title>
        <link>http://PTrainbow.github.io/</link>
        <description>北邙山之光的 Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 12 Feb 2025 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://PTrainbow.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Kotlin Native 解析</title>
    <link>http://PTrainbow.github.io/posts/Kotlin-Native-%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Mon, 10 Feb 2025 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/Kotlin-Native-%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[<p>最近，终于跑通了 kotlin-native 在鸿蒙上的 demo！</p>
<h2 id="前置知识">前置知识</h2>
<h3 id="kotlin-multiplatform">kotlin multiplatform</h3>
<p>kotlin multiplatform 是 jetbrains 推出来的跨端方案，渲染通过 compose(skia)，逻辑通过 kotlin。</p>
<p>逻辑这块在 iOS/linux 等平台依靠的是 <code>kotlin-native</code> 编译器，将 kotlin 代码直接编译成了对应平台的二进制，而在 jvm 平台则直接转为 java bytecode</p>]]></description>
</item><item>
    <title>Kotlin Native CInterop</title>
    <link>http://PTrainbow.github.io/posts/Kotlin-Native-Cinterop/</link>
    <pubDate>Tue, 07 Jan 2025 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/Kotlin-Native-Cinterop/</guid>
    <description><![CDATA[<p>最近在搞 k/n 鸿蒙的适配，也是有一些前人踩过坑，但是都没有开源，还是要自己埋头钻研</p>
<p>这部分后续会给一个详细文档吧</p>
<p>今天主要来介绍 kotlin/native 中的 cinterop</p>
<p>其实，在编译 kotlin/native 编译器，生成编译器需要的 platformLib 时，我就已经看到了 cinterop。他通过 kotlin/native 工程中声明的一些 .def 文件，编译过后都变成了标准的 kotlin 的跨平台库(klib) 格式</p>]]></description>
</item><item>
    <title>2024提前总结</title>
    <link>http://PTrainbow.github.io/posts/2024%E6%8F%90%E5%89%8D%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 22 Nov 2024 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/2024%E6%8F%90%E5%89%8D%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[<p>为什么选这个奇怪的时间写下这篇文章呢？因为我终于确定了一个 offer 了！（当然后续可能也有幺蛾子，比如小米 offer call 以后，又说没有 hc，雷总···你们招人也太奇怪了···）。然后，这段时间的经历实在让我脑壳子嗡嗡的，又做了一次人生的错误决定来到传说中的宇宙条，不过人生的魔抗叠厚了不少···</p>]]></description>
</item><item>
    <title>ASM 和 JVM 关联知识</title>
    <link>http://PTrainbow.github.io/posts/ASM-%E5%92%8C-JVM-%E5%85%B3%E8%81%94%E7%9F%A5%E8%AF%86/</link>
    <pubDate>Sun, 21 Jul 2024 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/ASM-%E5%92%8C-JVM-%E5%85%B3%E8%81%94%E7%9F%A5%E8%AF%86/</guid>
    <description><![CDATA[<h2 id="背景">背景</h2>
<p>最近做日志治理(其实也没啥治理的)，发现日志存活时间很短，因为各个业务方的日志汇总在一个实例里，有任何无用日志频繁打印，都会把日志覆盖掉</p>
<p>那其实，治理的办法也很简单：</p>]]></description>
</item><item>
    <title>LearnJVM 有趣的发现</title>
    <link>http://PTrainbow.github.io/posts/LearnJVM-%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8F%91%E7%8E%B0/</link>
    <pubDate>Mon, 29 Apr 2024 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/LearnJVM-%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8F%91%E7%8E%B0/</guid>
    <description><![CDATA[<p>为了兑现自己立下的 flag 🤣，这两天刚好假期前，继续实现 JVM</p>
<blockquote>
<p>打算定个小目标：每个月更新一次 LearnJVM 这个项目</p>
</blockquote>
<p>第五章的指令好多好多，所以还在不断地 copy &amp; paste</p>
<p>实现的途中发现了 ICONST_X 指令很有意思，如下图：</p>]]></description>
</item><item>
    <title>LearnJVM 重启</title>
    <link>http://PTrainbow.github.io/posts/LearnJVM-%E9%87%8D%E5%90%AF/</link>
    <pubDate>Mon, 01 Apr 2024 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/LearnJVM-%E9%87%8D%E5%90%AF/</guid>
    <description><![CDATA[<p>虽然今天是愚人节，但是还是要立下 flag，重启 <a href="https://github.com/PTrainbow/LearnJVM" target="_blank" rel="noopener noreffer">JVM 项目</a></p>
<p>之前，一方面想学习 rust，一方面也想更深入的理解 JVM，于是这么一个项目就诞生了</p>
<p>源码来自 《自己动手写Java虚拟机》，我将 go 翻译为 rust(但是因为很多 rust 概念刚接触，写的结构很凌乱，也都不是最佳实践，只求编译通过)</p>]]></description>
</item><item>
    <title>maven publish dependency</title>
    <link>http://PTrainbow.github.io/posts/maven-publish-dependency/</link>
    <pubDate>Fri, 23 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/maven-publish-dependency/</guid>
    <description><![CDATA[<p>​今天 pull 工程，发现有个库的源码看不到，在 gradle external libraries 中也找不到，只能找到一个 api 接口层的代码</p>
<p>于是，就研究了一下原因</p>
<h2 id="pom-文件">pom 文件</h2>
<p>我们在向 maven 发布 aar 时，会生成对应的 pom 文件，告诉我们具体依赖哪些额外 lib</p>]]></description>
</item><item>
    <title>Kotlin/Native</title>
    <link>http://PTrainbow.github.io/posts/20231208-Kotlin-Native/</link>
    <pubDate>Fri, 08 Dec 2023 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/20231208-Kotlin-Native/</guid>
    <description><![CDATA[<p>最近 KMP 或者说 KMM 在移动端挺火，我非常好奇它是如何跨端的</p>
<p>看了一下官方文档，只知道是通过 LLVM 把 Kotlin 转为 IR 再转为目标平台二进制。这部分我目前还没去分析，因为 LLVM 相关的知识我实在知之甚少，后面也会去补足</p>]]></description>
</item><item>
    <title>fp unwind</title>
    <link>http://PTrainbow.github.io/posts/20231127-fp-unwind/</link>
    <pubDate>Mon, 27 Nov 2023 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/20231127-fp-unwind/</guid>
    <description><![CDATA[<p>为了公司内部写一篇软文，所以这篇文章重写了一下~~</p>
<h2 id="正文">正文</h2>
<p>今天给大家分享一种 arm64 平台下栈回溯的方式 —— fp(frame pointer) 回溯，同时会介绍一些基础概念和实现原理</p>
<p>首先，我们需要知道栈回溯是做什么的？<br>
其实就是用于获取当前 thread 的调用堆栈的</p>]]></description>
</item><item>
    <title>资源去重</title>
    <link>http://PTrainbow.github.io/posts/%E8%B5%84%E6%BA%90%E5%8E%BB%E9%87%8D/</link>
    <pubDate>Thu, 12 Oct 2023 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/%E8%B5%84%E6%BA%90%E5%8E%BB%E9%87%8D/</guid>
    <description><![CDATA[<p>最近不知道为什么，我司又开始缩减包体积了，在这个 app 都 100-200M 的年代，在这个 5G 遥遥领先的年代，不知道卷个啥？</p>
<p>那问题不大，既然有需求，我们照做便是</p>
<h2 id="前置思考">前置思考</h2>
<p>Android 包体积由多方面构成，这个我之前的文章里也有说过，所以包体积缩减的手段有很多，这个就不一一介绍了</p>]]></description>
</item></channel>
</rss>
