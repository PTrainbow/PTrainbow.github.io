<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaScript - 标签 - 北邙山之光的 Blog</title>
        <link>http://PTrainbow.github.io/tags/JavaScript/</link>
        <description>JavaScript - 标签 - 北邙山之光的 Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 20 Nov 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://PTrainbow.github.io/tags/JavaScript/" rel="self" type="application/rss+xml" /><item>
    <title>Promise</title>
    <link>http://PTrainbow.github.io/posts/2019-11-20-Promise/</link>
    <pubDate>Wed, 20 Nov 2019 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/2019-11-20-Promise/</guid>
    <description><![CDATA[<p>如今写了很多门语言之后越来越有感触，事件驱动的设计离不开各种异步调用。比如 Android 中主线程如今已经不允许发送网络请求等等，这时候都需要一些异步回调。而在前端也是如此，但是前端8成以上的工程师能做的原理性的东西很少。<br>
首先 JsCore 改不了吧？水平有限！其次，CSS 的解析改不了吧？写各种 loader，各种插件已经很牛逼了，我感觉那些 webpack 相关的东西，至今我也不是很懂，只是会用。所以大部分人都关注在业务开发上。<br>
而客户端的工程师还有很多其他的事情研究，比如热更新啊、性能优化啊等等。<br>
我觉得没有好坏之分，但是前端在代码架构上或者一些设计上我觉得更优秀，客户端相比很落后。比如双向绑定，redux 等思想。再比如这个 promise，虽然客户端也有可以处理这种事情的东西，比如 RxJava、RxAndroid 等等，但是感觉没这么直接，RxJava 也要不停 subscribeOn、observeOn 等等，或者你说你写个 compose，但是还是那样，不直观不直接。</p>]]></description>
</item><item>
    <title>H5 audio 标签</title>
    <link>http://PTrainbow.github.io/posts/2019-06-23-H5-audio-%E6%A0%87%E7%AD%BE/</link>
    <pubDate>Sun, 23 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/2019-06-23-H5-audio-%E6%A0%87%E7%AD%BE/</guid>
    <description><![CDATA[<h3 id="背景">背景</h3>
<p>没错，前端天才终于涉及了真正的前端h5页面！</p>
<p>需求是优化一个两年前别人写的播放器！</p>
<p>可是坑死我了···</p>
<h3 id="audio">audio</h3>
<ul>
<li>几个重要的方法
<ul>
<li><code>play</code> 加载并播放音频或重新播放暂停的的音频</li>
<li><code>pause</code> 暂停处于播放状态的音频文件</li>
</ul>
</li>
<li>几个重要的回调
<ul>
<li><code>waiting</code> 无法直接播放，加载</li>
<li><code>canplay</code> 缓冲至目前可播放状态</li>
<li><code>play</code> play()和autoplay播放时</li>
<li><code>timeupdate</code> 播放时间变化</li>
<li><code>ended</code> 播放结束</li>
</ul>
</li>
</ul>
<h3 id="一个简单的播放器逻辑">一个简单的播放器逻辑</h3>
<ul>
<li>
<p>一个友好的用户交互</p>]]></description>
</item><item>
    <title>初识 Webpack 遇到的坑</title>
    <link>http://PTrainbow.github.io/posts/2019-06-14-%E5%88%9D%E8%AF%86-webpack-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</link>
    <pubDate>Fri, 14 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/2019-06-14-%E5%88%9D%E8%AF%86-webpack-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</guid>
    <description><![CDATA[<h3 id="概述">概述</h3>
<p>最近在搞 weex 工程，然后想要把我们开发的所有 weex 相关的东西集成到一个工程里面，然后可以实现组件的复用，打 bundle 的时候又需要分开编译</p>
<p>简而言之，就是支持多个工程分别打包，单个 vue 分别编译</p>]]></description>
</item><item>
    <title>Yoga 和 Flexbox</title>
    <link>http://PTrainbow.github.io/posts/2018-02-02-yoga-%E5%92%8C-flexbox/</link>
    <pubDate>Fri, 02 Feb 2018 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://PTrainbow.github.io/posts/2018-02-02-yoga-%E5%92%8C-flexbox/</guid>
    <description><![CDATA[<h2 id="yoga">Yoga</h2>
<p><a href="https://facebook.github.io/yoga/" target="_blank" rel="noopener noreffer">https://facebook.github.io/yoga/</a><br>
facebook 开源的布局框架，支持多种语言</p>
<h3 id="android-中使用-yoga">Android 中使用 Yoga</h3>
<p>通过</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">compile</span><span class="w"> </span><span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="na">facebook</span><span class="p">.</span><span class="na">yoga</span><span class="p">.</span><span class="na">android</span><span class="p">:</span><span class="n">yoga</span><span class="o">-</span><span class="n">layout</span><span class="p">:</span><span class="n">1</span><span class="p">.</span><span class="na">5</span><span class="p">.</span><span class="na">0</span><span class="err">&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">compile</span><span class="w"> </span><span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="na">facebook</span><span class="p">.</span><span class="na">yoga</span><span class="p">:</span><span class="n">yoga</span><span class="p">:</span><span class="n">1</span><span class="p">.</span><span class="na">5</span><span class="p">.</span><span class="na">0</span><span class="err">&#39;</span><span class="w">
</span></span></span></code></pre></div><p>即可使用</p>]]></description>
</item></channel>
</rss>
